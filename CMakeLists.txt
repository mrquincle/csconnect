##########################################################################################
#               _/\/\/\/\/\____/\/\/\/\__/\/\/\/\/\____/\/\_______                       #
#               _/\/\____/\/\____/\/\____/\/\____/\/\__/\/\_______                       #
#               _/\/\/\/\/\______/\/\____/\/\____/\/\__/\/\_______                       #
#               _/\/\__/\/\______/\/\____/\/\____/\/\__/\/\_______                       #
#               _/\/\____/\/\__/\/\/\/\__/\/\/\/\/\____/\/\/\/\/\_                       #
#               __________________________________________________                       #
##########################################################################################
# Part of RIDL, the RUR IDL builder which generates modules for middlewares, including 
# lightweight (robotic) middleware like YARP. 
# This makefile is part of a cmake build system. The code falls under the Lesser General 
# Public License (LGPL GNU v3).

# Author:	 Anne C. van Rossum (Almende B.V.)
# Date: 	 Nov 7, 2011
#
# ASCII Art generated by: http://www.network-science.de/ascii/ with font "ticks".
#
# Copyright Â© 2011 Anne van Rossum <anne@almende.com>
##########################################################################################

IF(WIN32)
cmake_minimum_required(VERSION 2.6)
ELSE(WIN32)
cmake_minimum_required(VERSION 2.4)
ENDIF(WIN32)

# The directory with all the FindXXX modules
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")

SET(PROJECT_NAME "csconnect")

SET(TEST_NAME "TestCSConnect")

# The macro below forces the build directory to be different from source directory:
INCLUDE( MacroEnsureOutOfSourceBuild )
MACRO_ENSURE_OUT_OF_SOURCE_BUILD(
	"${PROJECT_NAME} requires an out of source build."
)

# Build options
OPTION(BUILD_OAUTH     "Build module with oauth enabled" ON)
OPTION(BUILD_YARP      "Build module with YARP" OFF)
OPTION(BUILD_ROS       "Build module with ROS" OFF)

#set(CMAKE_CXX_FLAGS_DEBUG "-fPIC")
#set(CMAKE_CXX_FLAGS_RELEASE "-fPIC")

# Start a project
PROJECT(${PROJECT_NAME})

# Find all cmake packages
IF (BUILD_ROS)
  include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)
  rosbuild_init()
ENDIF (BUILD_ROS)

IF (BUILD_YARP)
  FIND_PACKAGE(YARP REQUIRED)
  INCLUDE_DIRECTORIES(${YARP_INCLUDE_DIRS})
  SET(LIBS ${LIBS} ${YARP_LIBRARIES})
ENDIF (BUILD_YARP)

FIND_PACKAGE(CURL REQUIRED)
INCLUDE_DIRECTORIES(${CURL_INCLUDE_DIRS})
SET(LIBS ${LIBS} ${CURL_LIBRARIES})

FIND_PACKAGE(OAuth REQUIRED)
INCLUDE_DIRECTORIES(${OAUTH_INCLUDE_DIRS})
SET(LIBS ${LIBS} ${OAUTH_LIBRARIES})

FIND_PACKAGE(JsonSpirit REQUIRED)
INCLUDE_DIRECTORIES(${JSON_SPIRIT_INCLUDE_DIRS})
SET(LIBS ${LIBS} ${JSON_SPIRIT_LIBRARIES})

# Turn on testing.
#enable_testing()

# Some debug information
MESSAGE("${PROJECT_NAME} is using CXX flags: ${CMAKE_CXX_FLAGS}")
MESSAGE ("Libraries included: ${LIBS}")

# Source directory
SET(SOURCE_DIR "src")
SET(INCLUDE_DIR "inc")

# Search for source code.
FILE(GLOB folder_source ${SOURCE_DIR}/*.cpp ${SOURCE_DIR}/*.cc ${SOURCE_DIR}/*.c)
FILE(GLOB folder_header ${INCLUDE_DIR}/*.h)
SOURCE_GROUP("Source Files" FILES ${folder_source})
SOURCE_GROUP("Header Files" FILES ${folder_header})

# Testing code
SET(TEST_DIR "test")
FILE(GLOB test_source ${TEST_DIR}/*.cpp ${TEST_DIR}/*.cc ${TEST_DIR}/*.c)
FILE(GLOB test_header ${TEST_DIR}/*.h)
SOURCE_GROUP("Source Files for Testing" FILES ${test_source})
SOURCE_GROUP("Header Files for Testing" FILES ${test_header})

# Automatically add include directories if needed.
FOREACH(header_file ${folder_header})
  GET_FILENAME_COMPONENT(p ${header_file} PATH)
  INCLUDE_DIRECTORIES(${p})
ENDFOREACH(header_file ${folder_header})

# Add "inc" directory for install target
ADD_SUBDIRECTORY(${INCLUDE_DIR})

# Set up our library
IF (folder_source)
	ADD_LIBRARY(${PROJECT_NAME} SHARED ${folder_source} ${folder_header})
	TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${LIBS})

	# install in default library directory 
	# - probably /usr/local/lib if executed by user 
	# - probably /usr/lib if automated via update manager (and Launchpad PPA)
    INSTALL(TARGETS ${PROJECT_NAME} DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
ELSE (folder_source)
  MESSAGE(FATAL_ERROR "No source code files found. Please add something")
ENDIF (folder_source)

IF (folder_source)
   ADD_EXECUTABLE(${TEST_NAME} ${test_source} ${folder_source} ${test_header} ${folder_header})
   TARGET_LINK_LIBRARIES(${TEST_NAME} ${LIBS})
   install(TARGETS ${TEST_NAME} RUNTIME DESTINATION bin)   
ELSE (folder_source)
  MESSAGE(FATAL_ERROR "No source code files found. Please add something")
ENDIF (folder_source)
